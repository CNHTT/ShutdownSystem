package com.szfp.ss.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szfp.ss.domain.ParkingRecordReportBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PARKING_RECORD_REPORT_BEAN".
*/
public class ParkingRecordReportBeanDao extends AbstractDao<ParkingRecordReportBean, Long> {

    public static final String TABLENAME = "PARKING_RECORD_REPORT_BEAN";

    /**
     * Properties of entity ParkingRecordReportBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property LastName = new Property(2, String.class, "lastName", false, "LAST_NAME");
        public final static Property FirstName = new Property(3, String.class, "firstName", false, "FIRST_NAME");
        public final static Property PType = new Property(4, int.class, "pType", false, "P_TYPE");
        public final static Property AdminId = new Property(5, long.class, "adminId", false, "ADMIN_ID");
        public final static Property AdminNumber = new Property(6, String.class, "adminNumber", false, "ADMIN_NUMBER");
        public final static Property EnterTime = new Property(7, long.class, "enterTime", false, "ENTER_TIME");
        public final static Property CreateTime = new Property(8, long.class, "createTime", false, "CREATE_TIME");
        public final static Property CreateDayTime = new Property(9, long.class, "createDayTime", false, "CREATE_DAY_TIME");
    }


    public ParkingRecordReportBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ParkingRecordReportBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PARKING_RECORD_REPORT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"LAST_NAME\" TEXT," + // 2: lastName
                "\"FIRST_NAME\" TEXT," + // 3: firstName
                "\"P_TYPE\" INTEGER NOT NULL ," + // 4: pType
                "\"ADMIN_ID\" INTEGER NOT NULL ," + // 5: adminId
                "\"ADMIN_NUMBER\" TEXT," + // 6: adminNumber
                "\"ENTER_TIME\" INTEGER NOT NULL ," + // 7: enterTime
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 8: createTime
                "\"CREATE_DAY_TIME\" INTEGER NOT NULL );"); // 9: createDayTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PARKING_RECORD_REPORT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ParkingRecordReportBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getUserId());
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(3, lastName);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(4, firstName);
        }
        stmt.bindLong(5, entity.getPType());
        stmt.bindLong(6, entity.getAdminId());
 
        String adminNumber = entity.getAdminNumber();
        if (adminNumber != null) {
            stmt.bindString(7, adminNumber);
        }
        stmt.bindLong(8, entity.getEnterTime());
        stmt.bindLong(9, entity.getCreateTime());
        stmt.bindLong(10, entity.getCreateDayTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ParkingRecordReportBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getUserId());
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(3, lastName);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(4, firstName);
        }
        stmt.bindLong(5, entity.getPType());
        stmt.bindLong(6, entity.getAdminId());
 
        String adminNumber = entity.getAdminNumber();
        if (adminNumber != null) {
            stmt.bindString(7, adminNumber);
        }
        stmt.bindLong(8, entity.getEnterTime());
        stmt.bindLong(9, entity.getCreateTime());
        stmt.bindLong(10, entity.getCreateDayTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ParkingRecordReportBean readEntity(Cursor cursor, int offset) {
        ParkingRecordReportBean entity = new ParkingRecordReportBean( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // firstName
            cursor.getInt(offset + 4), // pType
            cursor.getLong(offset + 5), // adminId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // adminNumber
            cursor.getLong(offset + 7), // enterTime
            cursor.getLong(offset + 8), // createTime
            cursor.getLong(offset + 9) // createDayTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ParkingRecordReportBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setLastName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFirstName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPType(cursor.getInt(offset + 4));
        entity.setAdminId(cursor.getLong(offset + 5));
        entity.setAdminNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEnterTime(cursor.getLong(offset + 7));
        entity.setCreateTime(cursor.getLong(offset + 8));
        entity.setCreateDayTime(cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ParkingRecordReportBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ParkingRecordReportBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ParkingRecordReportBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
