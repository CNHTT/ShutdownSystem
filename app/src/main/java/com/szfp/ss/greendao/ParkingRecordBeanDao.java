package com.szfp.ss.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szfp.ss.domain.model.ParkingRecordBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PARKING_RECORD_BEAN".
*/
public class ParkingRecordBeanDao extends AbstractDao<ParkingRecordBean, Long> {

    public static final String TABLENAME = "PARKING_RECORD_BEAN";

    /**
     * Properties of entity ParkingRecordBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tsn = new Property(1, String.class, "tsn", false, "TSN");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property MemberUuid = new Property(3, String.class, "memberUuid", false, "MEMBER_UUID");
        public final static Property MemberName = new Property(4, String.class, "memberName", false, "MEMBER_NAME");
        public final static Property MemberLpm = new Property(5, String.class, "memberLpm", false, "MEMBER_LPM");
        public final static Property OperateNumber = new Property(6, String.class, "operateNumber", false, "OPERATE_NUMBER");
        public final static Property OperateUuid = new Property(7, String.class, "operateUuid", false, "OPERATE_UUID");
        public final static Property DeviceSN = new Property(8, String.class, "deviceSN", false, "DEVICE_SN");
        public final static Property DeviceNumber = new Property(9, String.class, "deviceNumber", false, "DEVICE_NUMBER");
        public final static Property ParkingLotName = new Property(10, String.class, "parkingLotName", false, "PARKING_LOT_NAME");
        public final static Property ParkingUuid = new Property(11, String.class, "parkingUuid", false, "PARKING_UUID");
        public final static Property CompanyUuid = new Property(12, String.class, "companyUuid", false, "COMPANY_UUID");
        public final static Property Amount = new Property(13, double.class, "amount", false, "AMOUNT");
        public final static Property EnterLongTime = new Property(14, long.class, "enterLongTime", false, "ENTER_LONG_TIME");
        public final static Property ExitLongTime = new Property(15, long.class, "exitLongTime", false, "EXIT_LONG_TIME");
        public final static Property EnterTime = new Property(16, java.util.Date.class, "enterTime", false, "ENTER_TIME");
        public final static Property ExitTime = new Property(17, java.util.Date.class, "exitTime", false, "EXIT_TIME");
        public final static Property CreateTime = new Property(18, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ParkingTime = new Property(19, long.class, "parkingTime", false, "PARKING_TIME");
        public final static Property IntTime = new Property(20, int.class, "intTime", false, "INT_TIME");
        public final static Property CacheType = new Property(21, int.class, "cacheType", false, "CACHE_TYPE");
    }


    public ParkingRecordBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ParkingRecordBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PARKING_RECORD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TSN\" TEXT," + // 1: tsn
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"MEMBER_UUID\" TEXT," + // 3: memberUuid
                "\"MEMBER_NAME\" TEXT," + // 4: memberName
                "\"MEMBER_LPM\" TEXT," + // 5: memberLpm
                "\"OPERATE_NUMBER\" TEXT," + // 6: operateNumber
                "\"OPERATE_UUID\" TEXT," + // 7: operateUuid
                "\"DEVICE_SN\" TEXT," + // 8: deviceSN
                "\"DEVICE_NUMBER\" TEXT," + // 9: deviceNumber
                "\"PARKING_LOT_NAME\" TEXT," + // 10: parkingLotName
                "\"PARKING_UUID\" TEXT," + // 11: parkingUuid
                "\"COMPANY_UUID\" TEXT," + // 12: companyUuid
                "\"AMOUNT\" REAL NOT NULL ," + // 13: amount
                "\"ENTER_LONG_TIME\" INTEGER NOT NULL ," + // 14: enterLongTime
                "\"EXIT_LONG_TIME\" INTEGER NOT NULL ," + // 15: exitLongTime
                "\"ENTER_TIME\" INTEGER," + // 16: enterTime
                "\"EXIT_TIME\" INTEGER," + // 17: exitTime
                "\"CREATE_TIME\" INTEGER," + // 18: createTime
                "\"PARKING_TIME\" INTEGER NOT NULL ," + // 19: parkingTime
                "\"INT_TIME\" INTEGER NOT NULL ," + // 20: intTime
                "\"CACHE_TYPE\" INTEGER NOT NULL );"); // 21: cacheType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PARKING_RECORD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ParkingRecordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tsn = entity.getTsn();
        if (tsn != null) {
            stmt.bindString(2, tsn);
        }
        stmt.bindLong(3, entity.getType());
 
        String memberUuid = entity.getMemberUuid();
        if (memberUuid != null) {
            stmt.bindString(4, memberUuid);
        }
 
        String memberName = entity.getMemberName();
        if (memberName != null) {
            stmt.bindString(5, memberName);
        }
 
        String memberLpm = entity.getMemberLpm();
        if (memberLpm != null) {
            stmt.bindString(6, memberLpm);
        }
 
        String operateNumber = entity.getOperateNumber();
        if (operateNumber != null) {
            stmt.bindString(7, operateNumber);
        }
 
        String operateUuid = entity.getOperateUuid();
        if (operateUuid != null) {
            stmt.bindString(8, operateUuid);
        }
 
        String deviceSN = entity.getDeviceSN();
        if (deviceSN != null) {
            stmt.bindString(9, deviceSN);
        }
 
        String deviceNumber = entity.getDeviceNumber();
        if (deviceNumber != null) {
            stmt.bindString(10, deviceNumber);
        }
 
        String parkingLotName = entity.getParkingLotName();
        if (parkingLotName != null) {
            stmt.bindString(11, parkingLotName);
        }
 
        String parkingUuid = entity.getParkingUuid();
        if (parkingUuid != null) {
            stmt.bindString(12, parkingUuid);
        }
 
        String companyUuid = entity.getCompanyUuid();
        if (companyUuid != null) {
            stmt.bindString(13, companyUuid);
        }
        stmt.bindDouble(14, entity.getAmount());
        stmt.bindLong(15, entity.getEnterLongTime());
        stmt.bindLong(16, entity.getExitLongTime());
 
        java.util.Date enterTime = entity.getEnterTime();
        if (enterTime != null) {
            stmt.bindLong(17, enterTime.getTime());
        }
 
        java.util.Date exitTime = entity.getExitTime();
        if (exitTime != null) {
            stmt.bindLong(18, exitTime.getTime());
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(19, createTime.getTime());
        }
        stmt.bindLong(20, entity.getParkingTime());
        stmt.bindLong(21, entity.getIntTime());
        stmt.bindLong(22, entity.getCacheType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ParkingRecordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tsn = entity.getTsn();
        if (tsn != null) {
            stmt.bindString(2, tsn);
        }
        stmt.bindLong(3, entity.getType());
 
        String memberUuid = entity.getMemberUuid();
        if (memberUuid != null) {
            stmt.bindString(4, memberUuid);
        }
 
        String memberName = entity.getMemberName();
        if (memberName != null) {
            stmt.bindString(5, memberName);
        }
 
        String memberLpm = entity.getMemberLpm();
        if (memberLpm != null) {
            stmt.bindString(6, memberLpm);
        }
 
        String operateNumber = entity.getOperateNumber();
        if (operateNumber != null) {
            stmt.bindString(7, operateNumber);
        }
 
        String operateUuid = entity.getOperateUuid();
        if (operateUuid != null) {
            stmt.bindString(8, operateUuid);
        }
 
        String deviceSN = entity.getDeviceSN();
        if (deviceSN != null) {
            stmt.bindString(9, deviceSN);
        }
 
        String deviceNumber = entity.getDeviceNumber();
        if (deviceNumber != null) {
            stmt.bindString(10, deviceNumber);
        }
 
        String parkingLotName = entity.getParkingLotName();
        if (parkingLotName != null) {
            stmt.bindString(11, parkingLotName);
        }
 
        String parkingUuid = entity.getParkingUuid();
        if (parkingUuid != null) {
            stmt.bindString(12, parkingUuid);
        }
 
        String companyUuid = entity.getCompanyUuid();
        if (companyUuid != null) {
            stmt.bindString(13, companyUuid);
        }
        stmt.bindDouble(14, entity.getAmount());
        stmt.bindLong(15, entity.getEnterLongTime());
        stmt.bindLong(16, entity.getExitLongTime());
 
        java.util.Date enterTime = entity.getEnterTime();
        if (enterTime != null) {
            stmt.bindLong(17, enterTime.getTime());
        }
 
        java.util.Date exitTime = entity.getExitTime();
        if (exitTime != null) {
            stmt.bindLong(18, exitTime.getTime());
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(19, createTime.getTime());
        }
        stmt.bindLong(20, entity.getParkingTime());
        stmt.bindLong(21, entity.getIntTime());
        stmt.bindLong(22, entity.getCacheType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ParkingRecordBean readEntity(Cursor cursor, int offset) {
        ParkingRecordBean entity = new ParkingRecordBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tsn
            cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // memberUuid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // memberName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // memberLpm
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // operateNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // operateUuid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // deviceSN
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // deviceNumber
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // parkingLotName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // parkingUuid
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // companyUuid
            cursor.getDouble(offset + 13), // amount
            cursor.getLong(offset + 14), // enterLongTime
            cursor.getLong(offset + 15), // exitLongTime
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // enterTime
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)), // exitTime
            cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)), // createTime
            cursor.getLong(offset + 19), // parkingTime
            cursor.getInt(offset + 20), // intTime
            cursor.getInt(offset + 21) // cacheType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ParkingRecordBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTsn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setMemberUuid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMemberName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMemberLpm(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOperateNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOperateUuid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeviceSN(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDeviceNumber(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setParkingLotName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setParkingUuid(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCompanyUuid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAmount(cursor.getDouble(offset + 13));
        entity.setEnterLongTime(cursor.getLong(offset + 14));
        entity.setExitLongTime(cursor.getLong(offset + 15));
        entity.setEnterTime(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setExitTime(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
        entity.setCreateTime(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
        entity.setParkingTime(cursor.getLong(offset + 19));
        entity.setIntTime(cursor.getInt(offset + 20));
        entity.setCacheType(cursor.getInt(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ParkingRecordBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ParkingRecordBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ParkingRecordBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
