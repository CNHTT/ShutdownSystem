package com.szfp.ss.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szfp.ss.domain.model.RechargeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECHARGE_BEAN".
*/
public class RechargeBeanDao extends AbstractDao<RechargeBean, Long> {

    public static final String TABLENAME = "RECHARGE_BEAN";

    /**
     * Properties of entity RechargeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MemberUuid = new Property(1, String.class, "memberUuid", false, "MEMBER_UUID");
        public final static Property MemberLPM = new Property(2, String.class, "memberLPM", false, "MEMBER_LPM");
        public final static Property MemberName = new Property(3, String.class, "memberName", false, "MEMBER_NAME");
        public final static Property Tsn = new Property(4, String.class, "tsn", false, "TSN");
        public final static Property RAmount = new Property(5, double.class, "rAmount", false, "R_AMOUNT");
        public final static Property BAmount = new Property(6, double.class, "bAmount", false, "B_AMOUNT");
        public final static Property AAmount = new Property(7, double.class, "aAmount", false, "A_AMOUNT");
        public final static Property OperateNumber = new Property(8, String.class, "operateNumber", false, "OPERATE_NUMBER");
        public final static Property OperateUuid = new Property(9, String.class, "operateUuid", false, "OPERATE_UUID");
        public final static Property DeviceSN = new Property(10, String.class, "deviceSN", false, "DEVICE_SN");
        public final static Property DeviceNumber = new Property(11, String.class, "deviceNumber", false, "DEVICE_NUMBER");
        public final static Property CompanyUuid = new Property(12, String.class, "companyUuid", false, "COMPANY_UUID");
        public final static Property CreateTime = new Property(13, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property CacheType = new Property(14, int.class, "cacheType", false, "CACHE_TYPE");
    }


    public RechargeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RechargeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECHARGE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MEMBER_UUID\" TEXT," + // 1: memberUuid
                "\"MEMBER_LPM\" TEXT," + // 2: memberLPM
                "\"MEMBER_NAME\" TEXT," + // 3: memberName
                "\"TSN\" TEXT," + // 4: tsn
                "\"R_AMOUNT\" REAL NOT NULL ," + // 5: rAmount
                "\"B_AMOUNT\" REAL NOT NULL ," + // 6: bAmount
                "\"A_AMOUNT\" REAL NOT NULL ," + // 7: aAmount
                "\"OPERATE_NUMBER\" TEXT," + // 8: operateNumber
                "\"OPERATE_UUID\" TEXT," + // 9: operateUuid
                "\"DEVICE_SN\" TEXT," + // 10: deviceSN
                "\"DEVICE_NUMBER\" TEXT," + // 11: deviceNumber
                "\"COMPANY_UUID\" TEXT," + // 12: companyUuid
                "\"CREATE_TIME\" INTEGER," + // 13: createTime
                "\"CACHE_TYPE\" INTEGER NOT NULL );"); // 14: cacheType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECHARGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RechargeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String memberUuid = entity.getMemberUuid();
        if (memberUuid != null) {
            stmt.bindString(2, memberUuid);
        }
 
        String memberLPM = entity.getMemberLPM();
        if (memberLPM != null) {
            stmt.bindString(3, memberLPM);
        }
 
        String memberName = entity.getMemberName();
        if (memberName != null) {
            stmt.bindString(4, memberName);
        }
 
        String tsn = entity.getTsn();
        if (tsn != null) {
            stmt.bindString(5, tsn);
        }
        stmt.bindDouble(6, entity.getRAmount());
        stmt.bindDouble(7, entity.getBAmount());
        stmt.bindDouble(8, entity.getAAmount());
 
        String operateNumber = entity.getOperateNumber();
        if (operateNumber != null) {
            stmt.bindString(9, operateNumber);
        }
 
        String operateUuid = entity.getOperateUuid();
        if (operateUuid != null) {
            stmt.bindString(10, operateUuid);
        }
 
        String deviceSN = entity.getDeviceSN();
        if (deviceSN != null) {
            stmt.bindString(11, deviceSN);
        }
 
        String deviceNumber = entity.getDeviceNumber();
        if (deviceNumber != null) {
            stmt.bindString(12, deviceNumber);
        }
 
        String companyUuid = entity.getCompanyUuid();
        if (companyUuid != null) {
            stmt.bindString(13, companyUuid);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(14, createTime.getTime());
        }
        stmt.bindLong(15, entity.getCacheType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RechargeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String memberUuid = entity.getMemberUuid();
        if (memberUuid != null) {
            stmt.bindString(2, memberUuid);
        }
 
        String memberLPM = entity.getMemberLPM();
        if (memberLPM != null) {
            stmt.bindString(3, memberLPM);
        }
 
        String memberName = entity.getMemberName();
        if (memberName != null) {
            stmt.bindString(4, memberName);
        }
 
        String tsn = entity.getTsn();
        if (tsn != null) {
            stmt.bindString(5, tsn);
        }
        stmt.bindDouble(6, entity.getRAmount());
        stmt.bindDouble(7, entity.getBAmount());
        stmt.bindDouble(8, entity.getAAmount());
 
        String operateNumber = entity.getOperateNumber();
        if (operateNumber != null) {
            stmt.bindString(9, operateNumber);
        }
 
        String operateUuid = entity.getOperateUuid();
        if (operateUuid != null) {
            stmt.bindString(10, operateUuid);
        }
 
        String deviceSN = entity.getDeviceSN();
        if (deviceSN != null) {
            stmt.bindString(11, deviceSN);
        }
 
        String deviceNumber = entity.getDeviceNumber();
        if (deviceNumber != null) {
            stmt.bindString(12, deviceNumber);
        }
 
        String companyUuid = entity.getCompanyUuid();
        if (companyUuid != null) {
            stmt.bindString(13, companyUuid);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(14, createTime.getTime());
        }
        stmt.bindLong(15, entity.getCacheType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RechargeBean readEntity(Cursor cursor, int offset) {
        RechargeBean entity = new RechargeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // memberUuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // memberLPM
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // memberName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tsn
            cursor.getDouble(offset + 5), // rAmount
            cursor.getDouble(offset + 6), // bAmount
            cursor.getDouble(offset + 7), // aAmount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // operateNumber
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // operateUuid
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // deviceSN
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // deviceNumber
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // companyUuid
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // createTime
            cursor.getInt(offset + 14) // cacheType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RechargeBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMemberUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMemberLPM(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMemberName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTsn(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRAmount(cursor.getDouble(offset + 5));
        entity.setBAmount(cursor.getDouble(offset + 6));
        entity.setAAmount(cursor.getDouble(offset + 7));
        entity.setOperateNumber(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOperateUuid(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDeviceSN(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDeviceNumber(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCompanyUuid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreateTime(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setCacheType(cursor.getInt(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RechargeBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RechargeBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RechargeBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
