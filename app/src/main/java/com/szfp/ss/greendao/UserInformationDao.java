package com.szfp.ss.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szfp.ss.domain.UserInformation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFORMATION".
*/
public class UserInformationDao extends AbstractDao<UserInformation, Long> {

    public static final String TABLENAME = "USER_INFORMATION";

    /**
     * Properties of entity UserInformation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property LastName = new Property(1, String.class, "lastName", false, "LAST_NAME");
        public final static Property FirstName = new Property(2, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LicensePlateNumber = new Property(3, String.class, "licensePlateNumber", false, "LICENSE_PLATE_NUMBER");
        public final static Property TelephoneNumber = new Property(4, String.class, "telephoneNumber", false, "TELEPHONE_NUMBER");
    }


    public UserInformationDao(DaoConfig config) {
        super(config);
    }
    
    public UserInformationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFORMATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"LAST_NAME\" TEXT," + // 1: lastName
                "\"FIRST_NAME\" TEXT," + // 2: firstName
                "\"LICENSE_PLATE_NUMBER\" TEXT," + // 3: licensePlateNumber
                "\"TELEPHONE_NUMBER\" TEXT);"); // 4: telephoneNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFORMATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInformation entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(2, lastName);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(3, firstName);
        }
 
        String licensePlateNumber = entity.getLicensePlateNumber();
        if (licensePlateNumber != null) {
            stmt.bindString(4, licensePlateNumber);
        }
 
        String telephoneNumber = entity.getTelephoneNumber();
        if (telephoneNumber != null) {
            stmt.bindString(5, telephoneNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInformation entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(2, lastName);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(3, firstName);
        }
 
        String licensePlateNumber = entity.getLicensePlateNumber();
        if (licensePlateNumber != null) {
            stmt.bindString(4, licensePlateNumber);
        }
 
        String telephoneNumber = entity.getTelephoneNumber();
        if (telephoneNumber != null) {
            stmt.bindString(5, telephoneNumber);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UserInformation readEntity(Cursor cursor, int offset) {
        UserInformation entity = new UserInformation( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lastName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // firstName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // licensePlateNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // telephoneNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInformation entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setLastName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFirstName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLicensePlateNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTelephoneNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInformation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInformation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInformation entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
