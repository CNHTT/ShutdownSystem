package com.szfp.asoriba.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szfp.asoriba.bean.MemberBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEMBER_BEAN".
*/
public class MemberBeanDao extends AbstractDao<MemberBean, Long> {

    public static final String TABLENAME = "MEMBER_BEAN";

    /**
     * Properties of entity MemberBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UUID = new Property(1, String.class, "UUID", false, "UUID");
        public final static Property ChooseType = new Property(2, String.class, "chooseType", false, "CHOOSE_TYPE");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property FirstName = new Property(4, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(5, String.class, "lastName", false, "LAST_NAME");
        public final static Property Gender = new Property(6, String.class, "gender", false, "GENDER");
        public final static Property Marital = new Property(7, String.class, "marital", false, "MARITAL");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
        public final static Property MembershipId = new Property(9, String.class, "membershipId", false, "MEMBERSHIP_ID");
        public final static Property UHF_ID = new Property(10, String.class, "UHF_ID", false, "UHF__ID");
        public final static Property IsBind = new Property(11, boolean.class, "isBind", false, "IS_BIND");
    }


    public MemberBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MemberBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMBER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UUID\" TEXT," + // 1: UUID
                "\"CHOOSE_TYPE\" TEXT," + // 2: chooseType
                "\"TITLE\" TEXT," + // 3: title
                "\"FIRST_NAME\" TEXT," + // 4: firstName
                "\"LAST_NAME\" TEXT," + // 5: lastName
                "\"GENDER\" TEXT," + // 6: gender
                "\"MARITAL\" TEXT," + // 7: marital
                "\"PHONE\" TEXT," + // 8: phone
                "\"MEMBERSHIP_ID\" TEXT," + // 9: membershipId
                "\"UHF__ID\" TEXT," + // 10: UHF_ID
                "\"IS_BIND\" INTEGER NOT NULL );"); // 11: isBind
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMBER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MemberBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String UUID = entity.getUUID();
        if (UUID != null) {
            stmt.bindString(2, UUID);
        }
 
        String chooseType = entity.getChooseType();
        if (chooseType != null) {
            stmt.bindString(3, chooseType);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(5, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(6, lastName);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(7, gender);
        }
 
        String marital = entity.getMarital();
        if (marital != null) {
            stmt.bindString(8, marital);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String membershipId = entity.getMembershipId();
        if (membershipId != null) {
            stmt.bindString(10, membershipId);
        }
 
        String UHF_ID = entity.getUHF_ID();
        if (UHF_ID != null) {
            stmt.bindString(11, UHF_ID);
        }
        stmt.bindLong(12, entity.getIsBind() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MemberBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String UUID = entity.getUUID();
        if (UUID != null) {
            stmt.bindString(2, UUID);
        }
 
        String chooseType = entity.getChooseType();
        if (chooseType != null) {
            stmt.bindString(3, chooseType);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(5, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(6, lastName);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(7, gender);
        }
 
        String marital = entity.getMarital();
        if (marital != null) {
            stmt.bindString(8, marital);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String membershipId = entity.getMembershipId();
        if (membershipId != null) {
            stmt.bindString(10, membershipId);
        }
 
        String UHF_ID = entity.getUHF_ID();
        if (UHF_ID != null) {
            stmt.bindString(11, UHF_ID);
        }
        stmt.bindLong(12, entity.getIsBind() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MemberBean readEntity(Cursor cursor, int offset) {
        MemberBean entity = new MemberBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UUID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chooseType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // firstName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lastName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // gender
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // marital
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // membershipId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // UHF_ID
            cursor.getShort(offset + 11) != 0 // isBind
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MemberBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUUID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChooseType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFirstName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGender(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMarital(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMembershipId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUHF_ID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsBind(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MemberBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MemberBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MemberBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
